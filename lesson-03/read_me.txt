Комментарии к домашнему заданию.
1. Структура БД vk создана по вашему скрипту через DBeaver. Всё прошло успешно.
2. Генерация тестовых данных.
   Файл fulldb20-08-2020 02-07_original.sql - это дамп, полученный с сайта http://filldb.info без какой-либо модификации. 
   Загружать его в таком виде я не стал, а провел некоторую ручную доработку. Были убраны команды создания таблиц, оставлены только инсерты.
   Также были отредактированы сами инсерты:
     2.1. Удалены вставки ключевых полей, чтобы не нарушить секвенции.
     2.2. Заменены значения полей, в которых предполагалось NULL, с нулей на NULL.
     2.3. Доведены до ума поля JSON, т.к. мне не удалось подобрать шаблон, получающий 100% валидный JSON.
   Доработанный дамп сохранен в файл fulldb_modified.sql. Данные из него были загружены в БД, используя DBeaver.
   После загрузки был снят дамп утилитой mysqldump, сохранен в файле vkdump.sql
3. Структура БД и усовершенствования.
   В целом структура БД понятна. Не очень очевидно поле photo_id в таблице profiles. Куда оно должно ссылаться? На таблицу media или куда-то еще?
   Что касается усовершенствований:
     3.1. Пол пользователей я бы вынес в отдельную таблицу-справочник. Тем самым мы себе облегчим именование полов по собственному вкусу - не жестко 'm' и 'f', а 'муж.' и 'жен.', например. 
          Ну и можно будет легко добавить в таблицу всякие неформальные полы, если того потребует общество или законы.
     3.2. Было бы удобнее ключевые столбцы именовать не просто "id", а добавляя префикс из 3-4 букв, сформированный от названия таблицы/. 
          Например, в таблице users сделать поле user_id, в таблице messages - msg_id и т.п. Соответственно, ссылки на такие поля именовать удвоенным префиксом. Т.е. таблица friendship может выглядеть так:
            CREATE TABLE friendship 
            (
              user_user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на инициатора дружеских отношений",
              frnd_user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на получателя приглашения дружить",
              stat_stat_id INT UNSIGNED NOT NULL COMMENT "Ссылка на статус (текущее состояние) отношений",
              requested_at DATETIME DEFAULT NOW() COMMENT "Время отправления приглашения дружить",
              confirmed_at DATETIME COMMENT "Время подтверждения приглашения",
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
              updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки",  
              PRIMARY KEY (user_id, friend_id) COMMENT "Составной первичный ключ"
           ) COMMENT "Таблица дружбы";
     3.3. Дальнейшим развитием таблицы friendship можно реализовать историчность статусов, чтобы можно было посмотреть всю историю изменения статусов дружбы: 
          CREATE TABLE friendship 
          (
            user_user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на инициатора дружеских отношений",
            frnd_user_id INT UNSIGNED NOT NULL COMMENT "Ссылка на получателя приглашения дружить",
            stat_stat_id INT UNSIGNED NOT NULL COMMENT "Ссылка на статус отношений",
            number_history INT UNSIGNED NOT NULL COMMENT "Номер исторической записи"
            start_date DATETIME DEFAULT NOW() COMMENT "Время начала действия записи",
            end_date DATETIME COMMENT "Время окончания действия записи",
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
            PRIMARY KEY (user_id, friend_id, number_history) COMMENT "Составной первичный ключ"
         ) COMMENT "Таблица дружбы";
     3.4. Необходмо настроить FOREIGN KEYS между таблицами, но я так и не понял, прошли мы их или нет.
